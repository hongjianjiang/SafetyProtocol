This program should be regarded as a DEBUGGING aid, not as a 
certifier of correctness.
Call with the -l flag or read the license file for terms
and conditions of use.
Run this program with "-h" for the list of options.

Bugs, questions, and comments should be directed to
"melatti@di.uniroma1.it".

CMurphi compiler last modified date: Oct 20 2020
Include files last modified date:    Nov 8 2016
==========================================================================

==========================================================================
Caching Murphi Release 5.4.9.1
Finite-state Concurrent System Verifier.

Caching Murphi Release 5.4.9.1 is based on various versions of Murphi.
Caching Murphi Release 5.4.9.1 :
Copyright (C) 2009-2012 by Sapienza University of Rome.
Murphi release 3.1 :
Copyright (C) 1992 - 1999 by the Board of Trustees of
Leland Stanford Junior University.

==========================================================================

Protocol: result

Algorithm:
	Verification by breadth first search.
	with symmetry algorithm 3 -- Heuristic Small Memory Normalization
	with permutation trial limit 10.

Memory usage:

	* The size of each state is 110040 bits (rounded up to 13760 bytes).
	* The memory allocated for the hash table and state queue is
	  8 Mbytes.
	  With two words of overhead per state, the maximum size of
	  the state space is 587 states.
	   * Use option "-k" or "-m" to increase this, if necessary.
	* Capacity in queue for breadth-first search: 58 states.
	   * Change the constant gPercentActiveStates in mu_prolog.inc
	     to increase this, if necessary.

Warning: No trace will not be printed in the case of protocol errors!
         Check the options if you want to have error traces.
roleA[i] in st1
aenc{concat(supi,ue)}PK(UDM)intruder get msg from ch[1].
roleB[i] in st1
aenc{concat(supi,ue)}PK(UDM)---intruder emit msg into ch[1].
roleB[i] in st2
roleB[i] in st1
concat(aenc{concat(supi,ue)}PK(UDM),seafn)intruder get msg from ch[2].
roleC[i] in st1
roleB[i] in st2
rule deconcat25
roleC[i] in st2
concat(aenc{concat(supi,ue)}PK(UDM),seafn)intruder get msg from ch[2].
roleC[i] in st1
concat(aenc{concat(supi,ue)}PK(UDM),seafn)intruder get msg from ch[3].
roleD[i] in st1
rule deconcat25
concat(aenc{concat(supi,ue)}PK(UDM),seafn)---intruder emit msg into ch[2].
roleC[i] in st2
rule deconcat25
roleD[i] in st2
concat(aenc{concat(supi,ue)}PK(UDM),seafn)---intruder emit msg into ch[2].
rule deconcat25
roleC[i] in st1
concat(aenc{concat(supi,ue)}PK(UDM),seafn)intruder get msg from ch[3].
roleD[i] in st1
startintruder get msg from ch[4].
roleC[i] in st3
roleC[i] in st1
rule deconcat25
roleC[i] in st2
rule deconcat25
roleD[i] in st2
roleC[i] in st4
roleC[i] in st2
rule deconcat25
concat(aenc{concat(supi,ue)}PK(UDM),seafn)intruder get msg from ch[3].
roleD[i] in st1
startintruder get msg from ch[4].
roleC[i] in st3
startintruder get msg from ch[5].
roleB[i] in st3
concat(aenc{concat(supi,ue)}PK(UDM),seafn)intruder get msg from ch[3].
roleD[i] in st1
rule deconcat25
rule deconcat25
roleD[i] in st2
roleC[i] in st4
roleB[i] in st4
roleD[i] in st2
rule deconcat25
startintruder get msg from ch[4].
roleC[i] in st3
startintruder get msg from ch[5].
roleB[i] in st3
startintruder get msg from ch[6].
roleA[i] in st2
startintruder get msg from ch[4].
roleC[i] in st3
rule deconcat25
rule deconcat25
roleC[i] in st4
roleB[i] in st4
roleA[i] in st3
roleC[i] in st4
rule deconcat25
startintruder get msg from ch[5].
roleB[i] in st3
startintruder get msg from ch[6].
roleA[i] in st2
ue1intruder get msg from ch[7].
roleB[i] in st5
startintruder get msg from ch[5].
roleB[i] in st3
rule deconcat25
rule deconcat25
roleB[i] in st4
roleA[i] in st3
roleB[i] in st6
roleB[i] in st4
rule deconcat25
startintruder get msg from ch[6].
roleA[i] in st2
ue1intruder get msg from ch[7].
roleB[i] in st5
ue1intruder get msg from ch[8].
roleC[i] in st5
startintruder get msg from ch[6].
roleA[i] in st2
rule deconcat25
rule deconcat25
roleA[i] in st3
roleB[i] in st6
roleC[i] in st6
roleA[i] in st3
rule deconcat25
ue1intruder get msg from ch[7].
roleB[i] in st5
ue1intruder get msg from ch[8].
roleC[i] in st5
concat(ausf,certC)intruder get msg from ch[9].
roleB[i] in st7
ue1intruder get msg from ch[7].
roleB[i] in st5
rule deconcat25
rule deconcat25
roleB[i] in st6
roleC[i] in st6
rule deconcat10
roleB[i] in st8
roleB[i] in st6
rule deconcat25
ue1intruder get msg from ch[8].
roleC[i] in st5
concat(ausf,certC)intruder get msg from ch[9].
roleB[i] in st7
concat(ausf,certC)intruder get msg from ch[10].
roleA[i] in st4
ue1intruder get msg from ch[8].
roleC[i] in st5
rule deconcat25
rule deconcat25
roleC[i] in st6
rule deconcat10
roleB[i] in st8
rule deconcat30
roleA[i] in st5
roleC[i] in st6
rule deconcat25
concat(ausf,certC)intruder get msg from ch[9].
roleB[i] in st7
concat(ausf,certC)intruder get msg from ch[10].
roleA[i] in st4
concat(aenc{prekey}PK(AUSF),certA,sign{concat(start,ue1,ausf,certC)}PK(UE),senc{concat(start,ue1,ausf,certC)}hash(concat(ue1,ausf,prekey));)intruder get msg from ch[11].
roleB[i] in st9
concat(ausf,certC)intruder get msg from ch[9].
roleB[i] in st7
rule deconcat25
rule deconcat10
rule deconcat25
roleB[i] in st8
rule deconcat30
roleA[i] in st5
rule deconcat19
roleB[i] in st10
rule deconcat10
roleB[i] in st8
rule deconcat25
rule deconcat25
concat(ausf,certC)intruder get msg from ch[10].
roleA[i] in st4
concat(aenc{prekey}PK(AUSF),certA,sign{concat(start,ue1,ausf,certC)}PK(UE),senc{concat(start,ue1,ausf,certC)}hash(concat(ue1,ausf,prekey));)intruder get msg from ch[11].
roleB[i] in st9
rule sdecrypt18
concat(aenc{prekey}PK(AUSF),certA,sign{concat(start,ue1,ausf,certC)}PK(UE),senc{concat(start,ue1,ausf,certC)}hash(concat(ue1,ausf,prekey));)intruder get msg from ch[12].
roleC[i] in st7
concat(ausf,certC)intruder get msg from ch[10].
roleA[i] in st4
rule deconcat30
rule deconcat25
rule deconcat25
roleA[i] in st5
rule deconcat19
roleB[i] in st10
rule deconcat35
roleC[i] in st8
rule deconcat30
roleA[i] in st5
rule deconcat25
rule deconcat25
concat(aenc{prekey}PK(AUSF),certA,sign{concat(start,ue1,ausf,certC)}PK(UE),senc{concat(start,ue1,ausf,certC)}hash(concat(ue1,ausf,prekey));)intruder get msg from ch[11].
roleB[i] in st9
rule sdecrypt18
concat(aenc{prekey}PK(AUSF),certA,sign{concat(start,ue1,ausf,certC)}PK(UE),senc{concat(start,ue1,ausf,certC)}hash(concat(ue1,ausf,prekey));)intruder get msg from ch[12].
roleC[i] in st7
senc{concat(start,ue1,ausf,certC)}hash(concat(ue1,ausf,prekey));intruder get msg from ch[13].
roleB[i] in st11
concat(aenc{prekey}PK(AUSF),certA,sign{concat(start,ue1,ausf,certC)}PK(UE),senc{concat(start,ue1,ausf,certC)}hash(concat(ue1,ausf,prekey));)intruder get msg from ch[11].
roleB[i] in st9
rule deconcat25
rule deconcat19
rule deconcat25
roleB[i] in st10
rule deconcat35
roleC[i] in st8
rule sdecrypt18
roleB[i] in st12
rule deconcat19
roleB[i] in st10
rule deconcat25
rule sdecrypt18
rule deconcat25
concat(aenc{prekey}PK(AUSF),certA,sign{concat(start,ue1,ausf,certC)}PK(UE),senc{concat(start,ue1,ausf,certC)}hash(concat(ue1,ausf,prekey));)intruder get msg from ch[12].
roleC[i] in st7
senc{concat(start,ue1,ausf,certC)}hash(concat(ue1,ausf,prekey));intruder get msg from ch[13].
roleB[i] in st11
senc{concat(start,ue1,ausf,certC)}hash(concat(ue1,ausf,prekey));intruder get msg from ch[14].
roleA[i] in st6
rule sdecrypt18
concat(aenc{prekey}PK(AUSF),certA,sign{concat(start,ue1,ausf,certC)}PK(UE),senc{concat(start,ue1,ausf,certC)}hash(concat(ue1,ausf,prekey));)intruder get msg from ch[12].
roleC[i] in st7
rule deconcat35
rule deconcat25
rule deconcat25
roleC[i] in st8
rule sdecrypt18
roleB[i] in st12
roleA[i] in st7
rule deconcat35
roleC[i] in st8
rule deconcat25
rule deconcat25
senc{concat(start,ue1,ausf,certC)}hash(concat(ue1,ausf,prekey));intruder get msg from ch[13].
roleB[i] in st11
senc{concat(start,ue1,ausf,certC)}hash(concat(ue1,ausf,prekey));intruder get msg from ch[14].
roleA[i] in st6
eapmintruder get msg from ch[15].
roleB[i] in st13
senc{concat(start,ue1,ausf,certC)}hash(concat(ue1,ausf,prekey));intruder get msg from ch[13].
roleB[i] in st11
rule deconcat25
rule sdecrypt18
rule deconcat25
roleB[i] in st12
roleA[i] in st7
roleB[i] in st14
rule sdecrypt18
roleB[i] in st12
rule deconcat25
senc{concat(start,ue1,ausf,certC)}hash(concat(ue1,ausf,prekey));intruder get msg from ch[14].
roleA[i] in st6
eapmintruder get msg from ch[15].
roleB[i] in st13
eapmintruder get msg from ch[16].
roleC[i] in st9
senc{concat(start,ue1,ausf,certC)}hash(concat(ue1,ausf,prekey));intruder get msg from ch[14].
roleA[i] in st6
rule deconcat25
rule deconcat25
roleA[i] in st7
roleB[i] in st14
roleC[i] in st10
roleA[i] in st7
rule deconcat25
eapmintruder get msg from ch[15].
roleB[i] in st13
eapmintruder get msg from ch[16].
roleC[i] in st9
sucmintruder get msg from ch[17].
roleB[i] in st15
eapmintruder get msg from ch[15].
roleB[i] in st13
rule deconcat25
rule deconcat25
roleB[i] in st14
roleC[i] in st10
roleB[i] in st16
roleB[i] in st14
rule deconcat25
eapmintruder get msg from ch[16].
roleC[i] in st9
sucmintruder get msg from ch[17].
roleB[i] in st15
sucmintruder get msg from ch[18].
roleA[i] in st8
eapmintruder get msg from ch[16].
roleC[i] in st9
rule deconcat25
rule deconcat25
roleC[i] in st10
roleB[i] in st16
roleC[i] in st10
rule deconcat25
sucmintruder get msg from ch[17].
roleB[i] in st15
sucmintruder get msg from ch[18].
roleA[i] in st8
sucmintruder get msg from ch[17].
roleB[i] in st15
rule deconcat25
rule deconcat25
roleB[i] in st16
roleB[i] in st16
rule deconcat25
sucmintruder get msg from ch[18].
roleA[i] in st8
sucmintruder get msg from ch[18].
roleA[i] in st8
rule deconcat25
rule deconcat25

==========================================================================

Status:

	No error found.

State Space Explored:

	229 states, 289 rules fired in 0.10s.

Analysis of State Space:

	There are rules that are never fired.
	If you are running with symmetry, this may be why.  Otherwise,
	please run this program with "-pr" for the rules information.
