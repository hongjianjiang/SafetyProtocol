This program should be regarded as a DEBUGGING aid, not as a 
certifier of correctness.
Call with the -l flag or read the license file for terms
and conditions of use.
Run this program with "-h" for the list of options.

Bugs, questions, and comments should be directed to
"melatti@di.uniroma1.it".

CMurphi compiler last modified date: Oct 20 2020
Include files last modified date:    Nov 8 2016
==========================================================================

==========================================================================
Caching Murphi Release 5.4.9.1
Finite-state Concurrent System Verifier.

Caching Murphi Release 5.4.9.1 is based on various versions of Murphi.
Caching Murphi Release 5.4.9.1 :
Copyright (C) 2009-2012 by Sapienza University of Rome.
Murphi release 3.1 :
Copyright (C) 1992 - 1999 by the Board of Trustees of
Leland Stanford Junior University.

==========================================================================

Protocol: result

Algorithm:
	Verification by breadth first search.
	with symmetry algorithm 3 -- Heuristic Small Memory Normalization
	with permutation trial limit 10.

Memory usage:

	* The size of each state is 50488 bits (rounded up to 6312 bytes).
	* The memory allocated for the hash table and state queue is
	  8 Mbytes.
	  With states hash-compressed to 40 bits, the maximum size of
	  the state space is 1379321 states.
	   * Use option "-k" or "-m" to increase this, if necessary.
	* Capacity in queue for breadth-first search: 137932 states.
	   * Change the constant gPercentActiveStates in mu_prolog.inc
	     to increase this, if necessary.

Warning: No trace will not be printed in the case of protocol errors!
         Check the options if you want to have error traces.
rule constructExp 2
roleA[i] in st1
rule constructMod 3
roleA[i] in st1
rule constructExp 2
intruder get msg from ch[1].
roleB[i] in st1
intruder emit msg into ch[1].
roleA[i] in st1
rule constructMod 3
intruder get msg from ch[1].
roleB[i] in st1
rule constructMod 3
intruder get msg from ch[1].
roleB[i] in st1
rule decrypt mod 3
rule constructExp 2
intruder emit msg into ch[2].
intruder emit msg into ch[1].
rule constructExp 2
roleB[i] in st2
roleB[i] in st1
intruder emit msg into ch[2].
intruder get msg from ch[1].
roleB[i] in st1
intruder emit msg into ch[2].
intruder get msg from ch[1].
roleB[i] in st1
rule constructMod 3
rule decrypt mod 3
intruder emit msg into ch[2].
intruder emit msg into ch[1].
rule constructMod 3
roleB[i] in st2
intruder emit msg into ch[2].
intruder get msg from ch[1].
roleB[i] in st1
rule constructMod 3
rule decrypt mod 3
intruder emit msg into ch[2].
intruder emit msg into ch[1].
rule constructMod 3
roleB[i] in st2
rule constructExp 2
intruder emit msg into ch[2].
intruder emit msg into ch[1].
rule decrypt mod 3
rule constructExp 2
roleA[i] in st2
rule decrypt mod 3
rule constructExp 2
roleB[i] in st1
rule constructExp 2
intruder get msg from ch[2].
roleA[i] in st2
roleB[i] in st2
roleA[i] in st1
intruder get msg from ch[1].
roleB[i] in st1
roleA[i] in st2
rule decrypt mod 3
intruder emit msg into ch[2].
intruder emit msg into ch[2].
intruder emit msg into ch[1].
intruder emit msg into ch[1].
intruder emit msg into ch[2].
roleB[i] in st2
intruder get msg from ch[1].
roleB[i] in st1
roleA[i] in st2
rule decrypt mod 3
intruder emit msg into ch[2].
intruder emit msg into ch[2].
intruder emit msg into ch[1].
intruder emit msg into ch[1].
intruder emit msg into ch[2].
roleB[i] in st2
rule decrypt mod 3
intruder emit msg into ch[2].
intruder emit msg into ch[2].
intruder emit msg into ch[1].
intruder emit msg into ch[1].
rule constructMod 3
intruder emit msg into ch[2].
intruder emit msg into ch[1].
rule constructMod 3
rule decrypt mod 3
roleA[i] in st2
rule constructMod 3
rule decrypt mod 3
roleB[i] in st1
rule constructMod 3
intruder get msg from ch[2].
roleA[i] in st2
intruder get msg from ch[1].
roleB[i] in st1
roleA[i] in st2
rule decrypt mod 3
intruder emit msg into ch[2].
intruder emit msg into ch[2].
intruder emit msg into ch[1].
intruder emit msg into ch[1].
intruder emit msg into ch[2].
roleB[i] in st2
rule decrypt mod 3
intruder emit msg into ch[2].
intruder emit msg into ch[2].
intruder emit msg into ch[1].
intruder emit msg into ch[1].
rule constructMod 3
intruder emit msg into ch[2].
intruder emit msg into ch[1].
rule constructMod 3
rule decrypt mod 3
roleA[i] in st2
rule constructMod 3
rule decrypt mod 3
roleB[i] in st1
rule constructMod 3
intruder get msg from ch[2].
roleA[i] in st2
rule constructMod 3
intruder emit msg into ch[2].
intruder emit msg into ch[1].
rule constructExp 2
roleA[i] in st2
rule constructExp 2
roleB[i] in st1
rule decrypt mod 3
rule constructExp 2
roleA[i] in st3
rule decrypt mod 3
rule constructExp 2
roleB[i] in st2
rule constructMod 3
intruder get msg from ch[2].
roleA[i] in st2
rule decrypt mod 3
rule constructExp 2
intruder emit msg into ch[2].
rule constructExp 2
roleA[i] in st3
intruder get msg from ch[2].
roleA[i] in st1
intruder get msg from ch[1].
roleB[i] in st2
rule decrypt mod 3
intruder emit msg into ch[1].
roleA[i] in st2
roleA[i] in st2
intruder get msg from ch[1].
roleB[i] in st1
roleA[i] in st3
intruder emit msg into ch[2].
intruder emit msg into ch[2].
intruder emit msg into ch[1].
intruder emit msg into ch[1].
rule decrypt mod 3
intruder emit msg into ch[1].
roleA[i] in st2
rule decrypt mod 3
intruder emit msg into ch[2].
roleB[i] in st1
rule decrypt mod 3
intruder emit msg into ch[2].
roleB[i] in st1
intruder get msg from ch[2].
roleA[i] in st2
rule decrypt mod 3
intruder emit msg into ch[1].
roleA[i] in st2
roleA[i] in st2
intruder get msg from ch[1].
roleB[i] in st1
roleA[i] in st3
intruder emit msg into ch[2].
intruder emit msg into ch[2].
intruder emit msg into ch[1].
intruder emit msg into ch[1].
rule decrypt mod 3
intruder emit msg into ch[1].
roleA[i] in st2
rule decrypt mod 3
intruder emit msg into ch[2].
roleB[i] in st1
rule decrypt mod 3
intruder emit msg into ch[2].
roleB[i] in st1
intruder get msg from ch[2].
roleA[i] in st2
intruder emit msg into ch[2].
intruder emit msg into ch[2].
intruder emit msg into ch[1].
intruder emit msg into ch[1].
rule decrypt mod 3
intruder emit msg into ch[1].
roleA[i] in st2
rule decrypt mod 3
intruder emit msg into ch[1].
roleA[i] in st2
rule decrypt mod 3
intruder emit msg into ch[2].
roleB[i] in st1
rule decrypt mod 3
intruder emit msg into ch[2].
roleB[i] in st1
rule constructMod 3
roleA[i] in st2
rule constructMod 3
roleB[i] in st1
rule constructMod 3
rule decrypt mod 3
roleA[i] in st3
rule constructMod 3
rule decrypt mod 3
roleB[i] in st2
intruder get msg from ch[2].
roleA[i] in st2
rule constructMod 3
rule decrypt mod 3
intruder emit msg into ch[2].
rule constructMod 3
roleA[i] in st3
rule decrypt mod 3
intruder emit msg into ch[1].
roleA[i] in st2
roleA[i] in st2
intruder get msg from ch[1].
roleB[i] in st1
roleA[i] in st3
intruder emit msg into ch[2].
intruder emit msg into ch[2].
intruder emit msg into ch[1].
intruder emit msg into ch[1].
rule decrypt mod 3
intruder emit msg into ch[1].
roleA[i] in st2
rule decrypt mod 3
intruder emit msg into ch[2].
roleB[i] in st1
rule decrypt mod 3
intruder emit msg into ch[2].
roleB[i] in st1
intruder get msg from ch[2].
roleA[i] in st2
intruder emit msg into ch[2].
intruder emit msg into ch[2].
intruder emit msg into ch[1].
intruder emit msg into ch[1].
rule decrypt mod 3
intruder emit msg into ch[1].
roleA[i] in st2
rule decrypt mod 3
intruder emit msg into ch[1].
roleA[i] in st2
rule decrypt mod 3
intruder emit msg into ch[2].
roleB[i] in st1
rule decrypt mod 3
intruder emit msg into ch[2].
roleB[i] in st1
rule constructMod 3
roleA[i] in st2
rule constructMod 3
roleB[i] in st1
rule constructMod 3
rule decrypt mod 3
roleA[i] in st3
rule constructMod 3
rule decrypt mod 3
roleB[i] in st2
intruder get msg from ch[2].
roleA[i] in st2
rule constructMod 3
rule decrypt mod 3
intruder emit msg into ch[2].
rule constructMod 3
roleA[i] in st3
intruder emit msg into ch[2].
intruder emit msg into ch[2].
intruder emit msg into ch[1].
intruder emit msg into ch[1].
rule constructMod 3
roleA[i] in st2
rule constructMod 3
roleB[i] in st1
rule constructExp 2
roleA[i] in st3
rule constructExp 2
roleB[i] in st2
rule decrypt mod 3
rule constructExp 2
intruder get msg from ch[3].
rule decrypt mod 3
rule constructExp 2
intruder get msg from ch[2].
roleA[i] in st2
intruder get msg from ch[2].
roleA[i] in st2
rule constructMod 3
rule decrypt mod 3
intruder emit msg into ch[2].
rule constructMod 3
roleA[i] in st3
rule constructExp 2
intruder emit msg into ch[2].
rule decrypt mod 3
rule constructExp 2
roleA[i] in st2
rule constructExp 2
intruder get msg from ch[3].
roleB[i] in st3
rule decrypt mod 3
roleA[i] in st1
intruder get msg from ch[2].
intruder get msg from ch[1].
roleA[i] in st2
rule decrypt mod 3
intruder emit msg into ch[2].
roleB[i] in st2
intruder get msg from ch[2].
intruder get msg from ch[1].
roleA[i] in st2
intruder emit msg into ch[1].
roleA[i] in st2
rule decrypt mod 3
roleB[i] in st1
roleA[i] in st2
rule decrypt mod 3
intruder emit msg into ch[1].
roleA[i] in st3
roleB[i] in st2
roleA[i] in st3
intruder get msg from ch[3].
intruder get msg from ch[1].
roleB[i] in st1
intruder emit msg into ch[1].
roleA[i] in st2
intruder emit msg into ch[2].
roleB[i] in st1
intruder emit msg into ch[2].
roleB[i] in st1
rule decrypt mod 3
roleB[i] in st1
roleA[i] in st2
rule decrypt mod 3
intruder emit msg into ch[1].
roleA[i] in st3
rule decrypt mod 3
intruder emit msg into ch[2].
roleB[i] in st2
rule decrypt mod 3
intruder emit msg into ch[2].
roleB[i] in st2
rule decrypt mod 3
intruder emit msg into ch[2].
intruder emit msg into ch[2].
roleA[i] in st3
intruder emit msg into ch[1].
roleA[i] in st2
rule decrypt mod 3
roleB[i] in st1
roleA[i] in st2
rule decrypt mod 3
intruder emit msg into ch[1].
roleA[i] in st3
roleB[i] in st2
roleA[i] in st3
intruder get msg from ch[3].
intruder get msg from ch[1].
roleB[i] in st1
intruder emit msg into ch[1].
roleA[i] in st2
intruder emit msg into ch[2].
roleB[i] in st1
intruder emit msg into ch[2].
roleB[i] in st1
rule decrypt mod 3
roleB[i] in st1
roleA[i] in st2
rule decrypt mod 3
intruder emit msg into ch[1].
roleA[i] in st3
rule decrypt mod 3
intruder emit msg into ch[2].
roleB[i] in st2
rule decrypt mod 3
intruder emit msg into ch[2].
roleB[i] in st2
rule decrypt mod 3
intruder emit msg into ch[2].
intruder emit msg into ch[2].
roleA[i] in st3
intruder emit msg into ch[1].
roleA[i] in st2
intruder emit msg into ch[1].
roleA[i] in st2
intruder emit msg into ch[2].
roleB[i] in st1
intruder emit msg into ch[2].
roleB[i] in st1
rule decrypt mod 3
roleB[i] in st1
roleA[i] in st2
rule decrypt mod 3
intruder emit msg into ch[1].
roleA[i] in st3
rule decrypt mod 3
roleB[i] in st1
roleA[i] in st2
rule decrypt mod 3
intruder emit msg into ch[1].
roleA[i] in st3
rule decrypt mod 3
intruder emit msg into ch[2].
roleB[i] in st2
rule decrypt mod 3
intruder emit msg into ch[2].
roleB[i] in st2
rule constructMod 3
roleA[i] in st3
rule constructMod 3
roleB[i] in st2
rule constructMod 3
rule decrypt mod 3
intruder get msg from ch[3].
rule constructMod 3
rule decrypt mod 3
intruder get msg from ch[2].
roleA[i] in st2
rule decrypt mod 3
intruder emit msg into ch[2].
intruder emit msg into ch[2].
roleA[i] in st3
rule decrypt mod 3
intruder emit msg into ch[2].
intruder emit msg into ch[2].
rule constructMod 3
intruder emit msg into ch[2].
rule constructMod 3
rule decrypt mod 3
roleA[i] in st2
rule constructMod 3
intruder get msg from ch[3].
roleB[i] in st3
intruder emit msg into ch[1].
roleA[i] in st2
rule decrypt mod 3
roleB[i] in st1
roleA[i] in st2
rule decrypt mod 3
intruder emit msg into ch[1].
roleA[i] in st3
roleB[i] in st2
roleA[i] in st3
intruder get msg from ch[3].
intruder get msg from ch[1].
roleB[i] in st1
intruder emit msg into ch[1].
roleA[i] in st2
intruder emit msg into ch[2].
roleB[i] in st1
intruder emit msg into ch[2].
roleB[i] in st1
rule decrypt mod 3
roleB[i] in st1
roleA[i] in st2
rule decrypt mod 3
intruder emit msg into ch[1].
roleA[i] in st3
rule decrypt mod 3
intruder emit msg into ch[2].
roleB[i] in st2
rule decrypt mod 3
intruder emit msg into ch[2].
roleB[i] in st2
rule decrypt mod 3
intruder emit msg into ch[2].
intruder emit msg into ch[2].
roleA[i] in st3
intruder emit msg into ch[1].
roleA[i] in st2
intruder emit msg into ch[1].
roleA[i] in st2
intruder emit msg into ch[2].
roleB[i] in st1
intruder emit msg into ch[2].
roleB[i] in st1
rule decrypt mod 3
roleB[i] in st1
roleA[i] in st2
rule decrypt mod 3
intruder emit msg into ch[1].
roleA[i] in st3
rule decrypt mod 3
roleB[i] in st1
roleA[i] in st2
rule decrypt mod 3
intruder emit msg into ch[1].
roleA[i] in st3
rule decrypt mod 3
intruder emit msg into ch[2].
roleB[i] in st2
rule decrypt mod 3
intruder emit msg into ch[2].
roleB[i] in st2
rule constructMod 3
roleA[i] in st3
rule constructMod 3
roleB[i] in st2
rule constructMod 3
rule decrypt mod 3
intruder get msg from ch[3].
rule constructMod 3
rule decrypt mod 3
intruder get msg from ch[2].
roleA[i] in st2
rule decrypt mod 3
intruder emit msg into ch[2].
intruder emit msg into ch[2].
roleA[i] in st3
rule decrypt mod 3
intruder emit msg into ch[2].
intruder emit msg into ch[2].
rule constructMod 3
intruder emit msg into ch[2].
rule constructMod 3
rule decrypt mod 3
roleA[i] in st2
rule constructMod 3
intruder get msg from ch[3].
roleB[i] in st3
intruder emit msg into ch[1].
roleA[i] in st2
intruder emit msg into ch[1].
roleA[i] in st2
intruder emit msg into ch[2].
roleB[i] in st1
intruder emit msg into ch[2].
roleB[i] in st1
rule constructMod 3
roleA[i] in st3
rule constructMod 3
roleB[i] in st2
rule constructExp 2
intruder get msg from ch[3].
rule constructExp 2
intruder get msg from ch[2].
roleA[i] in st2
rule constructMod 3
rule decrypt mod 3
intruder get msg from ch[3].
rule sdecrypt8

==========================================================================

Result:

	Invariant "secrecy1" failed.

State Space Explored:

	377 states, 652 rules fired in 0.10s.

Analysis of State Space:

	There are rules that are never fired.
	If you are running with symmetry, this may be why.  Otherwise,
	please run this program with "-pr" for the rules information.
